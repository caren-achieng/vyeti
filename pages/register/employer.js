import axios from "axios";
import Head from "next/head";
import Box from "@mui/material/Box";
import Paper from "@mui/material/Paper";
import Button from "@mui/material/Button";
import Container from "@mui/material/Container";
import Grid from "@mui/material/Grid";
import Typography from "@mui/material/Typography";
import { useEffect, useState } from "react";
import { useRouter } from "next/router";
import WalletConnect from "../../components/util/WalletConnect";
import EmployerForm from "../../components/employer/EmployerForm";
import SideSection from "../../components/layout/SideSection";
import Steps from "../../components/layout/Steps";
import NextButton from "../../components/util/NextButton";
import ErrorDisplay from "../../components/util/ErrorDisplay";
import FinishButton from "../../components/util/FinishButton";
import SuccessDisplay from "../../components/util/SuccessDisplay";
import PopUpAlert from "../../components/util/PopUpAlert";

export default function Employer() {
  const [organizationname, setOrganizationName] = useState("");
  const [fullname, setFullName] = useState("");
  const [email, setEmail] = useState("");
  const [walletaddress, setWalletAddress] = useState("");
  const [phonenumber, setPhoneNumber] = useState("");
  const [physicaladdress, setPhysicalAddress] = useState("");
  const [activeStep, setActiveStep] = useState(0);
  const [next, setNext] = useState(false);
  const [finish, setFinish] = useState(false);
  const [alert, setAlert] = useState(false);
  const [success, setSuccess] = useState(false);
  const [errors, setErrors] = useState([]);
  const router = useRouter();

  useEffect(() => {
    if (!organizationname || !fullname || !email || !phonenumber) {
      setNext(false);
    } else {
      setNext(true);
    }
  }, [organizationname, fullname, email, phonenumber]);

  const handleNext = () => {
    const nextStep = activeStep + 1;
    setActiveStep(nextStep);
  };

  const handleBack = () => {
    const nextStep = activeStep - 1;
    setActiveStep(nextStep);
    setErrors([]);
  };

  const getWalletAddress = (address) => {
    setWalletAddress(address);
    setFinish(true);
    handleNext();
    console.log(address);
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      const data = {
        organization_name: organizationname,
        contact_person: fullname,
        email: email,
        wallet: walletaddress,
        phone: phonenumber,
        physical_address: physicaladdress,
      };
      const res = await axios.post("/api/employers", data);
      if (res) {
        await axios.post(`/api/mails/verification`, data);
        setSuccess(true);
        setAlert(true);
        router.push("/dashboard/employer");
      }
    } catch (err) {
      console.log(err);
      if (err) {
        setErrors(Object.values(err.response.data.errors));
      }
    }
  };
  return (
    <div>
      <Head>
        <title>Register Vyeti</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Grid container component="main" sx={{ height: "100vh" }}>
        <SideSection />
        <Grid item xs={12} sm={12} md={9} component={Paper} elevation={6}>
          <Box sx={{ m: 6 }} />
          <Container maxWidth="sm">
            <Grid align="center">
              <Typography variant="h5" sx={{}}>
                Create an Account
              </Typography>
              <Typography variant="subtitle1" color="text.secondary">
                Three simple steps to start earning digital credentials
              </Typography>
            </Grid>
            <Box sx={{ m: 4 }} />
            <Steps
              activeStep={activeStep}
              steps={["Enter Details", "Connect Wallet ", "Finish"]}
            />
            <Box sx={{ m: 4 }} />
            {activeStep === 0 ? (
              <Container maxWidth="sm">
                <EmployerForm
                  organizationname={organizationname}
                  fullname={fullname}
                  email={email}
                  phonenumber={phonenumber}
                  physicaladdress={physicaladdress}
                  setOrganizationName={setOrganizationName}
                  setFullName={setFullName}
                  setEmail={setEmail}
                  setPhoneNumber={setPhoneNumber}
                  setPhysicalAddress={setPhysicalAddress}
                />
                <NextButton next={next} handleNext={handleNext} />
              </Container>
            ) : (
              <Container maxWidth="sm">
                <WalletConnect setWalletAddress={getWalletAddress} />
                <SuccessDisplay
                  success={walletaddress}
                  message="Wallet Connected Successfully! Select finish to complete"
                />
                <Box sx={{ m: 4 }} />
                <Box sx={{ display: "flex" }}>
                  <Button sx={{ m: 1 }} onClick={handleBack}>
                    Back
                  </Button>
                  <FinishButton finish={finish} handleFinish={handleSubmit} />
                </Box>

                <ErrorDisplay errors={errors} />
              </Container>
            )}
          </Container>
        </Grid>
      </Grid>
      <PopUpAlert
        open={alert}
        success={success}
        message={"Account created successfully"}
        setOpen={setAlert}
      />
    </div>
  );
}
