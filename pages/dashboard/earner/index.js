import Head from "next/head";
import Box from "@mui/material/Box";
import Grid from "@mui/material/Grid";
import Container from "@mui/material/Container";
import Tabs from "@mui/material/Tabs";
import Tab from "@mui/material/Tab";
import Typography from "@mui/material/Typography";
import TabPanel from "../../../components/util/TabPanel";
import { useState } from "react";
import axios from "axios";
import jwt from "jsonwebtoken";
import CredentialCard from "../../../components/credential/CredentialCard";
import Navbar from "../../../components/layout/Navbar";
import EarnerProfile from "../../../components/earner/EarnerProfile";
import SubtitlesOffIcon from "@mui/icons-material/SubtitlesOff";

function a11yProps(index) {
  return {
    id: `simple-tab-${index}`,
    "aria-controls": `simple-tabpanel-${index}`,
  };
}

export default function Earner({ earner, credentials }) {
  const [value, setValue] = useState(0);

  const handleChange = (event, newValue) => {
    setValue(newValue);
  };

  return (
    <div>
      <Head>
        <title>Earner Dashboard</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Navbar />
      <Container>
        <Box
          sx={{ borderBottom: 1, borderColor: "divider", ml: 3, mr: 3, mt: 3 }}
        >
          <Tabs
            value={value}
            onChange={handleChange}
            aria-label="basic tabs example"
            centered
            textColor="secondary"
            indicatorColor="secondary"
          >
            <Tab label="My Credentials" {...a11yProps(0)} sx={{ ml: 2 }} />
            <Tab label="Profile Details" {...a11yProps(1)} sx={{ ml: 2 }} />
          </Tabs>
        </Box>
      </Container>
      <TabPanel value={value} index={0}>
        <Container maxWidth="lg">
          <Grid sx={{ m: 2 }}>
            <Grid container spacing={2}>
              {credentials &&
                credentials.map((credential) => (
                  <CredentialCard
                    credential={credential}
                    key={credential._id}
                  />
                ))}
            </Grid>
            {credentials.length === 0 ? (
              <Container align="center">
                <Box sx={{ mt: 6 }}>
                  <SubtitlesOffIcon sx={{ color: "#e0e0e0", fontSize: 60 }} />
                  <Box sx={{ m: 1 }} />
                  <Typography variant="caption" color="text.secondary">
                    You are Yet to Receive a Credential
                  </Typography>
                </Box>
              </Container>
            ) : null}
          </Grid>
        </Container>
      </TabPanel>
      <TabPanel value={value} index={1}>
        <Container maxWidth="lg">
          <EarnerProfile earner={earner} />
        </Container>
      </TabPanel>
    </div>
  );
}

export const getServerSideProps = async ({ req }) => {
  const { cookies } = req;
  const token = cookies.vyeti_jwt;
  const decoded_token = jwt.decode(token);
  const account_id = decoded_token.id;
  const verified = decoded_token.verified;

  if (!verified) {
    return {
      redirect: {
        destination: "/verifyaccount",
        permanent: false,
      },
    };
  }

  if (decoded_token.type === "employer") {
    return {
      redirect: {
        destination: "/dashboard/employer",
        permanent: false,
      },
    };
  } else if (decoded_token.type === "provider") {
    return {
      redirect: {
        destination: "/dashboard/provider",
        permanent: false,
      },
    };
  } else {
    const account = await axios.get(
      `https://vyeti.com/api/accounts/earners/${account_id}`
    );
    const earnerId = account.data.earner._id;

    const res = await axios.get(`https://vyeti.com/api/earners/${earnerId}`);
    return {
      props: {
        earner: res.data.earner,
        credentials: res.data.credentials,
      },
    };
  }
};
